"""
Data Subsetting for benchmark
"""
from pathlib import Path

from utils.environments import get_env
from utils.ModuleConfig import ModuleConfig

module_name = 'subset'
mcfg = ModuleConfig(
    module_name,
    config,
    config_params=['strategy', 'n_cells', 'sample', 'label', 'per_sample'],
    explode_by='strategy',
    wildcard_names=['strategy'],
)
paramspace = mcfg.get_paramspace()

module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *

rule subset:
    message:
        """
        Subsetting data
        input: {input}
        output: {output}
        params: {params}
        """
    input:
        lambda wildcards: mcfg.get_input_file(wildcards.dataset, wildcards.file_id),
    output:
        zarr=directory(mcfg.out_dir / f'{paramspace.wildcard_pattern}.zarr')  # TODO: remove from wildcards and use as params
    resources:
        mem_mb=lambda wildcards, attempt: mcfg.get_resource(profile='cpu',resource_key='mem_mb', attempt=attempt),
    params:
        n_cells=lambda wildcards: mcfg.get_from_parameters(wildcards, 'n_cells'),
        sample_key=lambda wildcards: mcfg.get_from_parameters(wildcards, 'sample'),
        label_key=lambda wildcards: mcfg.get_from_parameters(wildcards, 'label'),
        per_sample=lambda wildcards: mcfg.get_from_parameters(wildcards, 'per_sample'),
    conda:
        get_env(config, 'scanpy', env_dir='envs')
    script:
        'scripts/run.py'


rule all:
    input:
        mcfg.get_output_files(rules.subset.output)
    default_target: True
    localrule: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=mcfg.image_dir,
            target='all'
        )
    localrule: True
