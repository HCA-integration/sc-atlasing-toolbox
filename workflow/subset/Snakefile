"""
Data Subsetting for benchmark
"""
from pathlib import Path

from utils.config import get_datasets_for_module, get_for_dataset, get_resource, set_defaults
from utils.environments import get_env
from utils.ModuleConfig import ModuleConfig

module_name = 'subset'
module_config = ModuleConfig(module_name, config)
paramspace = module_config.get_paramspace()

module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *

rule subset:
    input:
        lambda wildcards: module_config.get_input_file(wildcards.dataset, wildcards.file_id),
    output:
        zarr=directory(module_config.out_dir / paramspace.wildcard_pattern / '{strategy}.zarr')
    resources:
        mem_mb=get_resource(config,profile='cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,profile='cpu_merged',resource_key='disk_mb'),
    params:
        n_cells=lambda wildcards: get_for_dataset(config, wildcards.dataset, query=[module_name, 'n_cells']),
        sample_key=lambda wildcards: get_for_dataset(config, wildcards.dataset, query=[module_name, 'sample']),
        label_key=lambda wildcards: get_for_dataset(config, wildcards.dataset, query=[module_name, 'label']),
    conda:
        get_env(config, 'scanpy', env_dir='envs')
    script:
        'scripts/{wildcards.strategy}.py'


rule all:
    input:
        expand(
            expand(rules.subset.output, zip, **module_config.get_input_file_wildcards(), allow_missing=True),
            strategy=['by_sample', 'within_sample']
        )
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=config['images'] + f'/{module_name}',
            target='all'
        )
