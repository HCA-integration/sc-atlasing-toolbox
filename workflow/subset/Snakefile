"""
Data Subsetting for benchmark
"""
from pathlib import Path

from utils.config import get_datasets_for_module, get_for_dataset, get_resource, set_defaults


module_name = 'subset'
config = set_defaults(config,module_name)
out_dir = Path(config['output_dir']) / module_name


module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *

rule subset:
    input:
        lambda wildcards: get_for_dataset(config, wildcards.dataset, ['input', module_name]),
    output:
        zarr=directory(out_dir / '{dataset}' / '{strategy}.zarr')
    resources:
        mem_mb=get_resource(config,profile='cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,profile='cpu_merged',resource_key='disk_mb'),
    params:
        n_cells=lambda wildcards: get_for_dataset(config, wildcards.dataset, query=[module_name, 'n_cells']),
        sample_key=lambda wildcards: get_for_dataset(config, wildcards.dataset, query=[module_name, 'sample']),
        label_key=lambda wildcards: get_for_dataset(config, wildcards.dataset, query=[module_name, 'label']),
    conda:
        'envs/scanpy.yaml'
    script:
        'scripts/{wildcards.strategy}.py'


rule all:
    input:
        expand(
            rules.subset.output,
            dataset=get_datasets_for_module(config,module=module_name),
            strategy=['by_sample', 'within_sample']
        )
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=config['images'] + f'/{module_name}',
            target='all'
        )
