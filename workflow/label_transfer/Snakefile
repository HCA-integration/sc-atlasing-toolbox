"""
Label transfer
"""
import os
from pathlib import Path

from utils.config import get_resource, get_wildcards_from_config, set_defaults
from utils.wildcards import get_params, get_wildcards
from utils.misc import unpack_dict_in_df
from utils.environments import get_env
from utils.ModuleConfig import ModuleConfig


def get_h5ad(wildcards):
    return config['DATASETS'][wildcards.dataset]['adata_file']


module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *

mcfg = ModuleConfig(
    module_name='label_transfer',
    config=config,
    config_params=['labels'], #['label', 'methods'],
    wildcard_names=[],
    # rename_config_params={'methods': 'method'},
)
paramspace = mcfg.get_paramspace()

module_name = 'label_transfer'
config = set_defaults(config,module_name)
out_dir = Path(config['output_dir']) / module_name
os.environ["CELLTYPIST_FOLDER"] = str(out_dir / 'models' / 'celltypist')

envvars:
    "CELLTYPIST_FOLDER"


parameters = get_wildcards_from_config(
    config=config['DATASETS'],
    config_keys=config['defaults']['datasets'],
    config_params=[module_name, 'label'],
    wildcard_names=['dataset', module_name, 'label'],
).merge(mcfg.get_wildcards(as_df=True))

# subset to datasets that have module defined
parameters = parameters[(~parameters[module_name].isnull()) & (parameters[module_name] != {})]
if parameters.empty:
    parameters['method'] = []
    parameters['model'] = []
else:
    parameters['method'] = [k for d in parameters[module_name] for k,v in d.items()]
    parameters['model'] = [list(v) for d in parameters[module_name] for k,v in d.items()]
    parameters = parameters.explode('model').reset_index(drop=True)

rule get_model:
    output:
        model=mcfg.out_dir / 'models' / '{method}' / '{model}.pkl'
    conda:
        lambda wildcards: get_env(config, wildcards.method)
    params:
        CELLTYPIST_FOLDER=os.environ["CELLTYPIST_FOLDER"]
    script:
        'scripts/get_model_{wildcards.method}.py'


rule run:
    input:
        h5ad=lambda wildcards: mcfg.get_input_file(**wildcards),
        model=rules.get_model.output.model,
    output:
        tsv=mcfg.out_dir / '{dataset}' / '{file_id}' / '{method}' / '{model}.tsv',
        png=mcfg.image_dir / '{dataset}' / '{file_id}' / '{method}-{model}.png',
    conda:
        lambda wildcards: get_env(config, wildcards.method)
    params:
        CELLTYPIST_FOLDER=os.environ["CELLTYPIST_FOLDER"],
        label_key=lambda wildcards: get_params(wildcards,parameters,'label')
    resources:
        mem_mb=mcfg.get_resource(profile='cpu_merged',resource_key='mem_mb')
    script:
        'scripts/celltypist.py'


rule all:
    input:
        expand(
            rules.run.output,
            zip,
            **get_wildcards(parameters, ['dataset', 'file_id', 'method', 'model'])
        )
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=mcfg.image_dir,
            target='all'
        )
