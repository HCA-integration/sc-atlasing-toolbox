"""
Label transfer
"""
import os
from pathlib import Path

from utils.config import get_resource, get_wildcards_from_config, set_defaults
from utils.wildcards import get_params, get_wildcards
from utils.misc import unpack_dict_in_df
from utils.environments import get_env
from utils.ModuleConfig import ModuleConfig


module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *

mcfg = ModuleConfig(
    module_name='cell_type_prediction',
    config=config,
    config_params=['reference_label', 'celltypist_models'],
    wildcard_names=[],
    rename_config_params={'celltypist_models': 'celltypist_model'},
    explode_by=['celltypist_model'],
)
paramspace = mcfg.get_paramspace()


include: 'rules/celltypist.smk'


rule collect:
    input:
        zarr=lambda wildcards: mcfg.get_input_file(**wildcards),
        celltypist=mcfg.get_output_files(rules.celltypist.output.zarr, all_params=True),
    output:
        zarr=directory(mcfg.out_dir / f'{paramspace.wildcard_pattern}.zarr')
    conda:
        get_env(config, 'scanpy')
    script:
        'scripts/collect.py'


rule all:
    input:
        mcfg.get_output_files(rules.collect.output),
    default_target: True
    localrule: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=mcfg.image_dir,
            target='all'
        )
    localrule: True
