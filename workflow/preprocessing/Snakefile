"""
Preprocessing
"""
from pathlib import Path
import pandas as pd

from utils.config import get_datasets_for_module, get_resource
from utils.misc import ifelse


module_name = 'preprocessing'
dataset_df = pd.read_table(workflow.source_path(config['dataset_meta']),comment='#')
out_dir = Path(config['output_dir']) / module_name


def get_input(wildcards):
    return config['DATASETS'][wildcards.dataset]['input']['preprocessing']


wildcard_constraints:
    dataset='\w+',


module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *


rule normalize:
    input:
        get_input
    output:
        h5ad=out_dir / '{dataset}' / 'normalized.h5ad'
    resources:
        mem_mb=get_resource(config,profile='cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,profile='cpu_merged',resource_key='disk_mb'),
    conda:
        'envs/scanpy.yaml'
    # shadow: 'minimal'
    script:
        'scripts/normalize.py'


rule highly_variable_genes:
    input:
        h5ad=rules.normalize.output.h5ad
    output:
        h5ad=out_dir / '{dataset}' / 'highly_variable_genes.h5ad'
    params:
        n_hvgs=2000,
        batch=lambda wildcards: config['DATASETS'][wildcards.dataset]['batch'],
        lineage=lambda wildcards: config['DATASETS'][wildcards.dataset]['lineage'],
    resources:
        mem_mb=get_resource(config,profile='cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,profile='cpu_merged',resource_key='disk_mb'),
    conda:
        'envs/scanpy.yaml'
    # shadow: 'minimal'
    script:
        'scripts/highly_variable_genes.py'


rule pca:
    input:
        h5ad=rules.highly_variable_genes.output.h5ad
    output:
        h5ad=out_dir / '{dataset}' / 'pca.h5ad'
    resources:
        mem_mb=get_resource(config,profile='cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,profile='cpu_merged',resource_key='disk_mb'),
    conda:
        ifelse(
            'os' not in config.keys() or config['os'] == 'm1',
            _if='envs/scanpy.yaml', _else='envs/scanpy_rapids.yaml'
        )
    # shadow: 'minimal'
    script:
        'scripts/pca.py'


rule neighbors:
    input:
        h5ad=rules.pca.output.h5ad
    output:
        h5ad=out_dir / '{dataset}' / 'neighbors.h5ad'
    resources:
        partition=get_resource(config,profile='gpu',resource_key='partition'),
        qos=get_resource(config,profile='gpu',resource_key='qos'),
        gpu=get_resource(config,profile='gpu',resource_key='gpu'),
        mem_mb=get_resource(config,profile='gpu',resource_key='mem_mb'),
    conda:
        ifelse(
            'os' not in config.keys() or config['os'] == 'm1',
            _if='envs/scanpy.yaml', _else='envs/scanpy_rapids.yaml'
        )
    # shadow: 'minimal'
    script:
        'scripts/neighbors.py'


rule umap:
    input:
        h5ad=rules.neighbors.output.h5ad
    output:
        h5ad=out_dir / '{dataset}' / 'umap.h5ad'
    resources:
        partition=get_resource(config,profile='gpu',resource_key='partition'),
        qos=get_resource(config,profile='gpu',resource_key='qos'),
        gpu=get_resource(config,profile='gpu',resource_key='gpu'),
        mem_mb=get_resource(config,profile='gpu',resource_key='mem_mb'),
    conda:
        ifelse(
            'os' not in config.keys() or config['os'] == 'm1',
            _if='envs/scanpy.yaml', _else='envs/scanpy_rapids.yaml'
        )
    # shadow: 'minimal'
    script:
        'scripts/umap.py'


rule all:
    input:
        expand(rules.neighbors.output,dataset=get_datasets_for_module(config,module='preprocessing')),
        expand(rules.umap.output,dataset=get_datasets_for_module(config,module='preprocessing'))
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=config['images'] + f'/{module_name}',
            target='all'
        )
