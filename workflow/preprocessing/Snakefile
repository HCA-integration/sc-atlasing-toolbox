"""
Preprocessing
"""
from pathlib import Path
import pandas as pd
from utils import get_datasets_for_module, get_resource


module_name = 'preprocessing'
dataset_df = pd.read_table(workflow.source_path(config['dataset_meta']),comment='#')
out_dir = Path(config['output_dir']) / module_name


def get_input(wildcards):
    return config['DATASETS'][wildcards.dataset]['input']['preprocessing']


wildcard_constraints:
    dataset='\w+',


module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *


rule normalize:
    input:
        zarr=get_input
    output:
        zarr=directory(out_dir / '{dataset}' / 'normalized.zarr')
    resources:
        mem_mb=get_resource(config,'cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,'cpu_merged',resource_key='disk_mb'),
    conda:
        'envs/scanpy.yaml'
    shadow: 'minimal'
    script:
        'scripts/normalize.py'


rule highly_variable_genes:
    input:
        zarr=rules.normalize.output.zarr
    output:
        zarr=directory(out_dir / '{dataset}' / 'highly_variable_genes.zarr')
    params:
        n_hvgs=2000,
        batch=lambda wildcards: config['DATASETS'][wildcards.dataset]['batch'],
    resources:
        mem_mb=get_resource(config,'cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,'cpu_merged',resource_key='disk_mb'),
    conda:
        'envs/scanpy.yaml'
    shadow: 'minimal'
    script:
        'scripts/highly_variable_genes.py'


rule pca:
    input:
        zarr=rules.highly_variable_genes.output.zarr
    output:
        zarr=directory(out_dir / '{dataset}' / 'pca.zarr')
    resources:
        mem_mb=get_resource(config,'cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,'cpu_merged',resource_key='disk_mb'),
    conda:
        'envs/scanpy.yaml'
    shadow: 'minimal'
    script:
        'scripts/pca.py'


rule neighbors:
    input:
        zarr=rules.pca.output.zarr
    output:
        zarr=directory(out_dir / '{dataset}' / 'neighbors.zarr')
    resources:
        mem_mb=get_resource(config,'cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,'cpu_merged',resource_key='disk_mb'),
    conda:
        'envs/scanpy.yaml'
    shadow: 'minimal'
    script:
        'scripts/neighbors.py'


rule umap:
    input:
        zarr=rules.neighbors.output.zarr
    output:
        zarr=directory(out_dir / '{dataset}' / 'umap.zarr')
    resources:
        mem_mb=get_resource(config,'cpu_merged',resource_key='mem_mb'),
        disk_mb=get_resource(config,'cpu_merged',resource_key='disk_mb'),
    conda:
        'envs/scanpy.yaml'
    shadow: 'minimal'
    script:
        'scripts/umap.py'


rule all:
    input:
        expand(rules.neighbors.output,dataset=get_datasets_for_module(config,module='preprocessing')),
        expand(rules.umap.output,dataset=get_datasets_for_module(config,module='preprocessing'))
    default_target: True
