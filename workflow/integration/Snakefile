"""
Integration
"""
from pathlib import Path
import numpy as np
import pandas as pd
from snakemake.utils import Paramspace

from utils.misc import all_but, unique_dataframe
from utils.config import get_hyperparams, get_resource, get_params_from_config, set_defaults, get_datasets_for_module, get_for_dataset
from utils.wildcards import expand_per, get_params, get_wildcards, wildcards_to_str


def get_input(wildcards):
    assert wildcards.dataset in config['DATASETS'].keys()
    assert 'input' in config['DATASETS'][wildcards.dataset].keys()
    assert 'integration' in config['DATASETS'][wildcards.dataset]['input'].keys()
    return config['DATASETS'][wildcards.dataset]['input']['integration']


module_name = 'integration'
config = set_defaults(config,module_name)
out_dir = Path(config['output_dir']) / module_name
image_dir = Path(config['images']) / module_name

os.environ['LD_LIBRARY_PATH'] = os.environ['CONDA_EXE'].replace('bin/conda', 'lib')
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'

envvars:
   'LD_LIBRARY_PATH',
   'TF_CPP_MIN_LOG_LEVEL',

parameters = pd.read_table(workflow.source_path('params.tsv'))
parameters['output_type'] = parameters['output_type'].str.split(',')
parameters = get_params_from_config(
    config=get_datasets_for_module(config, module_name),
    module_name=module_name,
    config_params=['methods', 'label', 'batch', 'lineage', 'norm_counts', 'raw_counts'],
    wildcard_names=['dataset', 'method', 'label', 'batch', 'lineage_key', 'norm_counts', 'raw_counts'],
    defaults=config['defaults'],
    explode_by=['method', 'lineage_key', 'batch'],
).merge(parameters,on='method')
parameters['lineage_key'] = parameters['lineage_key'].astype(str)

# subset to datasets that have module defined
parameters = parameters[~parameters['method'].isnull()]

# TODO: remove redundant wildcards
# parameters['label'] = np.where(parameters['use_cell_type'], parameters['label'], 'None')
# parameters = unique_dataframe(parameters)

hyperparams_df = get_hyperparams(config,module_name=module_name)
parameters = parameters.merge(hyperparams_df,on=['dataset', 'method'],how='left')
wildcard_names = ['dataset', 'method', 'batch', 'label', 'hyperparams', 'lineage_key']

paramspace = Paramspace(
    parameters[wildcard_names],
    filename_params=['batch', 'label', 'hyperparams', 'lineage_key'],
    filename_sep=',',
)

wildcard_constraints:
    dataset='\w+',
    method='\w+',
    batch='((?![/]).)*',
    label='((?![/]).)*',
    hyperparams='((?![/]).)*',
    lineage_key='((?![/]).)*',


module common:
    snakefile: "../common/Snakefile"
    config: config


use rule * from common as common_ *


include: 'rules/integration.smk'
include: 'rules/clustering.smk'
include: 'rules/lineage.smk'
include: 'rules/plots.smk'


rule per_lineage_all:
    input:
        rules.run_per_lineage_all.input,
        rules.plots_per_lineage_all.input,


rule all:
    input:
        rules.run_all.input,
        rules.plots_all.input,
        rules.per_lineage_all.input,
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=config['images'] + f'/{module_name}',
            target='all'
        )
