from pathlib import Path
import pandas as pd

from utils import get_wildcards_from_config, get_params


def get_h5ad(wildcards):
    return config['DATASETS'][wildcards.dataset]['adata_file']


parameters = pd.read_table(workflow.source_path('params.tsv'))
parameters = get_wildcards_from_config(
    config['DATASETS'],
    ['integration', 'label', 'batch'],
    ['dataset', 'method', 'label', 'batch'],
    explode_by='method'
).merge(parameters,on='method')
out_dir = Path(config['output_dir']) / 'integration'


rule all:
    input: '.snakemake/done.integration'
    shell:
        """
        rm {input}
        """


# TODO: add resource management
rule run:
    message:
        """
        Integrate {wildcards.dataset} with {wildcards.method}
        input: {input}
        output: {output}
        params: {params}
        wildcards: {wildcards}
        """
    input:
        h5ad=get_h5ad
    output:
        out_dir / '{dataset}/{method}.h5ad'
    params:
        dataset=lambda wildcards: get_params(wildcards,parameters,'dataset'),
        batch=lambda wildcards: get_params(wildcards,parameters,'batch'),
        label=lambda wildcards: get_params(wildcards,parameters,'label'),
        output_type=lambda wildcards: get_params(wildcards,parameters,'output_type'),
        env=lambda wildcards: get_params(wildcards,parameters,'env')
    conda:
        lambda wildcards, params: f'envs/{params.env}'
    script:
        'scripts/{wildcards.method}.py'


rule collect:
    input:
        expand(
            rules.run.output,
            zip,
            **parameters[['dataset', 'method']].to_dict('list')
        )
    output: touch('.snakemake/done.integration')
