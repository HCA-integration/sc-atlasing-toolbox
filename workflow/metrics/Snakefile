from pathlib import Path
import pandas as pd

from utils import get_wildcards_from_config, expand_per, get_wildcards, get_params, get_resource, set_defaults

module integration:
    snakefile: "../integration/Snakefile"
    config: config

use rule * from integration as integration_ *


config = set_defaults(config)

out_dir = Path(config['output_dir']) / 'metrics'

wildcards_df = get_wildcards_from_config(
    config=config,
    config_params=['integration', 'metrics', 'label', 'batch'],
    wildcard_names=['dataset', 'method', 'metric', 'label', 'batch'],
    explode_by=['method', 'metric']
)

# # get wildcards from input directory
# datasets, methods = glob_wildcards(in_path)
# integration_wildcards = pd.DataFrame({'dataset': datasets, 'method': methods})
# # get full parameters
# wildcards_df = get_wildcards_from_config(
#     config=config,
#     config_params=['metrics', 'label', 'batch'],
#     wildcard_names=['dataset', 'metric', 'label', 'batch'],
#     explode_by='metric'
# ).merge(
#     integration_wildcards,
#     on='dataset'
# )

parameters = pd.read_table(workflow.source_path('params.tsv'))
parameters = wildcards_df.merge(parameters,on='metric')


rule run:
    message:
        """
        Evaluate {wildcards.metric} on {wildcards.dataset}
        input: {input}
        output: {output}
        wildcards: {wildcards}
        """
    input:
        h5ad=rules.integration_run.output.h5ad,
        metrics_meta=workflow.source_path('params.tsv')
    output:
        metric=out_dir / 'datasets/{dataset}/{method}/{metric}.tsv'
    params:
        env=lambda wildcards: get_params(wildcards,parameters,'env')
    conda:
        lambda wildcards, params: f'envs/{params.env}.yaml'
    resources:
        partition=lambda w: get_resource(config,profile=get_params(w,parameters,'resources'),resource_key='partition'),
        qos=lambda w: get_resource(config,profile=get_params(w,parameters,'resources'),resource_key='qos')
    benchmark:
        out_dir / 'datasets/{dataset}/{method}/{metric}.benchmark.tsv'
    script:
        'scripts/{wildcards.metric}.py'


rule merge:
    message:
        """
        Merge all metrics for all datasets and methods
        datasets: {params.wildcards[dataset]}
        methods: {params.wildcards[method]}
        """
    input:
        metrics=lambda wildcards: expand_per(rules.run.output,parameters,wildcards,['dataset', 'method', 'metric']),
        benchmark=lambda wildcards: expand_per(rules.run.benchmark,parameters,wildcards,['dataset', 'method',
                                                                                         'metric']),
    output:
        metrics=out_dir / 'metrics.tsv',
        plot=out_dir / 'metrics.png',
        time=out_dir / 'metrics_time.png',
    params:
        wildcards=get_wildcards(parameters,['dataset', 'method', 'metric'])
    conda: 'envs/scanpy.yaml'
    script: 'scripts/merge.py'


use rule merge as merge_per_dataset with:
    message:
        """
        Merge all metrics for {wildcards}
        """
    input:
        metrics=lambda wildcards: expand_per(rules.run.output,parameters,wildcards,['method', 'metric']),
        benchmark=lambda wildcards: expand_per(rules.run.benchmark,parameters,wildcards,['method', 'metric']),
    output:
        metrics=out_dir / 'per_dataset' / '{dataset}_metrics.tsv',
        plot=out_dir / 'per_dataset' / '{dataset}.png',
        time=out_dir / 'per_dataset' / '{dataset}_time.png',
    params:
        wildcards=lambda wildcards: get_wildcards(parameters,['method', 'metric'],wildcards)


use rule merge as merge_per_method with:
    message:
        """
        Merge all metrics for {wildcards}
        """
    input:
        metrics=lambda wildcards: expand_per(rules.run.output,parameters,wildcards,['dataset', 'metric']),
        benchmark=lambda wildcards: expand_per(rules.run.benchmark,parameters,wildcards,['dataset', 'metric']),
    output:
        metrics=out_dir / 'per_method' / '{method}.tsv',
        plot=out_dir / 'per_method' / '{method}.png',
        time=out_dir / 'per_method' / '{method}_time.png',
    params:
        wildcards=lambda wildcards: get_wildcards(parameters,['dataset', 'metric'],wildcards)


rule all:
    input:
        expand(rules.merge_per_dataset.output,zip,**get_wildcards(parameters,['dataset'])),
        expand(rules.merge_per_method.output,zip,**get_wildcards(parameters,['method'])),
        rules.merge.output,
    default_target: True
