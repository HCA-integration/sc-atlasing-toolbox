"""
Metrics
"""
from pathlib import Path
import numpy as np
import pandas as pd
from snakemake.utils import Paramspace

from utils.misc import all_but
from utils.wildcards import expand_per, get_params, get_wildcards, wildcards_to_str
from utils.config import get_hyperparams, get_resource, get_params_from_config, set_defaults, \
    get_datasets_for_module, get_for_dataset

os.environ['LD_LIBRARY_PATH'] = os.environ['CONDA_EXE'].replace('bin/conda', 'lib')
os.environ['XLA_PYTHON_CLIENT_PREALLOCATE'] = 'false'
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'

envvars:
   'LD_LIBRARY_PATH',
   'XLA_PYTHON_CLIENT_PREALLOCATE',
   'TF_CPP_MIN_LOG_LEVEL',

module integration:
    snakefile: "../integration/Snakefile"
    config: config

use rule * from integration as integration_ *


module_name = 'metrics'
config = set_defaults(config,module_name)
out_dir = Path(config['output_dir']) / module_name
image_dir = Path(config['images']) / module_name

wildcards_df = get_params_from_config(
    config=config['DATASETS'],
    config_keys=config['defaults']['datasets'],
    module_name=module_name,
    config_params=['methods', 'label', 'batch', 'lineage'],
    wildcard_names=['dataset', 'metric', 'label', 'batch', 'lineage_key'],
    defaults=config['defaults'],
    explode_by=['metric', 'lineage_key', 'batch'],
).merge(
    get_params_from_config(
        config=get_datasets_for_module(config, 'integration'),
        module_name='integration',
        config_params=['methods', 'batch', 'lineage'],
        wildcard_names=['dataset', 'method', 'batch', 'lineage_key'],
        defaults=config['defaults'],
        explode_by=['method', 'lineage_key', 'batch'],
        warn=False,
    ),
    on=['dataset', 'batch', 'lineage_key'],
)

parameters = pd.read_table(workflow.source_path('params.tsv'))
hyperparams_df = get_hyperparams(config,module_name='integration')
parameters = wildcards_df \
    .merge(parameters,on='metric',how='inner') \
    .merge(hyperparams_df,on=['dataset', 'method'],how='left')
parameters['lineage_key'] = parameters['lineage_key'].astype(str)

# setup lineage specific integration
def determine_lineage_specific(lineage_key):
    if lineage_key == 'None':
        return ['global']
    return ['per_lineage', 'global']

parameters['lineage_specific'] = parameters.apply(
    lambda row: determine_lineage_specific(row['lineage_key']), axis=1
)
parameters = parameters.explode('lineage_specific')
# only lineage specific
# parameters = parameters.query('lineage_specific == "per_lineage"')

wildcard_names = ['dataset', 'method', 'hyperparams', 'metric', 'batch', 'label', 'lineage_key', 'lineage_specific']
paramspace = Paramspace(
    parameters[[w for w in wildcard_names if w != 'metric']],
    filename_params=['method', 'hyperparams', 'batch', 'label', 'lineage_key'],
    filename_sep='--',
)

wildcard_constraints:
    dataset='\w+',
    method='\w+',
    batch='((?![/]).)*',
    label='((?![/]).)*',
    hyperparams='((?![/]).)*',
    lineage_key='((?![/]).)*',
    lineage_specific='((?![/]).)*',


module common:
    snakefile: "../common/Snakefile"
    config: config


use rule * from common as common_ *


include: 'rules/metrics.smk'
include: 'rules/merge.smk'
include: 'rules/plots.smk'

rule all:
    input:
        rules.merge.output,
        rules.plots_all.input
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=image_dir / module_name,
            target='all'
        )
