"""
Metrics
"""
from pathlib import Path
import pandas as pd

from utils.environments import get_env
from utils.ModuleConfig import ModuleConfig

os.environ['LD_LIBRARY_PATH'] = os.environ['CONDA_EXE'].replace('bin/conda', 'lib')
os.environ['XLA_PYTHON_CLIENT_PREALLOCATE'] = 'false'
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '0'

envvars:
    'LD_LIBRARY_PATH',
    'XLA_PYTHON_CLIENT_PREALLOCATE',
    'TF_CPP_MIN_LOG_LEVEL',

# module integration:
#     snakefile: "../integration/Snakefile"
#     config: config

# use rule * from integration as integration_ *


mcfg = ModuleConfig(
    module_name='metrics',
    config=config,
    parameters=workflow.source_path('params.tsv'),
    config_params=['label', 'batch', 'methods', 'unintegrated'],
    wildcard_names=['label', 'batch', 'metric'],
    rename_config_params={'methods': 'metric'},
    explode_by=['metric', 'batch'],
    paramspace_kwargs=dict(filename_params=['label', 'batch', 'metric'], filename_sep='--'),
)

paramspace = mcfg.get_paramspace()
paramspace_no_metric = mcfg.get_paramspace(
    exclude=['metric'],
    filename_params=['label', 'batch'],
    filename_sep='--',
)


wildcard_constraints:
    dataset='\w+',
    method='\w+',
    batch='((?![/]).)*',
    label='((?![/]).)*',
    hyperparams='((?![/]).)*',
    lineage_key='((?![/]).)*',
    lineage_specific='((?![/]).)*',


module common:
    snakefile: "../common/Snakefile"
    config: config


use rule * from common as common_ *


include: 'rules/metrics.smk'
include: 'rules/merge.smk'
include: 'rules/plots.smk'

rule all:
    input:
        rules.merge.output,
        rules.plots_all.input
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=mcfg.image_dir,
            target='all'
        )
