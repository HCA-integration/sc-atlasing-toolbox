from pathlib import Path
import pandas as pd

from utils.ModuleConfig import ModuleConfig
from utils.environments import get_env


mcfg = ModuleConfig(
    module_name='filter',
    config=config,
    config_params=['dask', 'backed', 'subset',  'remove_by_column'],  # , 'keep_by_colum'
    dtypes={
        'dask': bool,
        'backed': bool,
    },
)
params = mcfg.get_paramspace()

wildcard_constraints:
    dataset=r'[^/]+',
    file_id=r'[^/]+',

module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *

module filtering:
    snakefile: "rules/rules.smk"
    config: config


use rule filter from filtering as filter with:
    input:
        zarr=lambda wildcards: mcfg.get_input_file(**wildcards)
    output:
        zarr=directory(mcfg.out_dir / f'{params.wildcard_pattern}.zarr'),
    params:
        remove_by_column=lambda wildcards: mcfg.get_from_parameters(wildcards, 'remove_by_column', default={}),
        backed=lambda wildcards: mcfg.get_from_parameters(wildcards, 'backed'),
        dask=lambda wildcards: mcfg.get_from_parameters(wildcards, 'dask'),
        subset=lambda wildcards: mcfg.get_from_parameters(wildcards, 'subset'),
    resources:
        mem_mb=lambda w, attempt: mcfg.get_resource(profile='cpu',resource_key='mem_mb',attempt=attempt),


rule all:
    input:
        mcfg.get_output_files(rules.filter.output)
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=mcfg.image_dir,
            target='all'
        )
