from pathlib import Path
import pandas as pd

from utils.config import get_datasets_for_module, get_for_dataset, get_resource, get_wildcards_from_config, set_defaults
from utils.wildcards import get_params, get_wildcards
from utils.misc import unlist_dict, unpack_dict_in_df
from utils.environments import get_env
from utils.ModuleConfig import ModuleConfig


module_name = 'relabel'
module_config = ModuleConfig(module_name, config)
paramspace = module_config.get_paramspace()


rule relabel:
    input:
        anndata=lambda wildcards: module_config.get_input_file(wildcards.dataset, wildcards.file_id),
        mapping=lambda wildcards: module_config.get_for_dataset(wildcards.dataset, query=[module_name, 'mapping', 'file'])
    output:
        zarr=directory(module_config.out_dir / f'{paramspace.wildcard_pattern}.zarr'),
    params:
        mapping_order=lambda wildcards: module_config.get_for_dataset(wildcards.dataset, query=[module_name, 'mapping', 'order']),
    conda:
        get_env(config, 'scanpy', env_dir='envs')
    resources:
        partition=lambda w: get_resource(config,resource_key='partition'),
        qos=lambda w: get_resource(config,resource_key='qos'),
        mem_mb=lambda w: get_resource(config,resource_key='mem_mb'),
    script:
        'script.py'


rule relabel_all:
    input:
        expand(rules.relabel.output, zip, **module_config.get_input_file_wildcards())


rule all:
    input:
        rules.relabel_all.input
    default_target: True


module common:
    snakefile: "../common/Snakefile"
    config: config


use rule * from common as common_ *


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=config['images'] + f'/{module_name}',
            target='all'
        )