from pathlib import Path
import pandas as pd

from utils.config import get_resource, get_wildcards_from_config, set_defaults
from utils.wildcards import get_params, get_wildcards
from utils.misc import unlist_dict, unpack_dict_in_df


module_name = 'relabel'
config = set_defaults(config,module_name,warn=False)
out_dir = Path(config['output_dir']) / module_name

parameters = get_wildcards_from_config(
    config=config['DATASETS'],
    config_keys=config['defaults']['datasets'],
    config_params=[module_name],
    wildcard_names=['dataset', 'module'],
)
# subset to datasets that have module defined
parameters = parameters[~parameters['module'].isnull()]
parameters = unpack_dict_in_df(parameters, 'module')

try:
    relabel_datasets = parameters[['dataset', 'mapping']].dropna()['dataset'].unique()
except KeyError:
    relabel_datasets = []


def get_input(wildcards, query=['input', module_name]):
    value = config['DATASETS'][wildcards.dataset]
    for q in query:
        value = value[q]
    return value


rule relabel:
    input:
        anndata=get_input,
        mapping=lambda wildcards: get_input(wildcards, query=[module_name, 'mapping', 'file'])
    output:
        h5ad=out_dir / '{dataset}.h5ad',
    params:
        mapping_order=lambda wildcards: get_input(wildcards, query=[module_name, 'mapping', 'order']),
    conda:
        'envs/scanpy.yaml'
    resources:
        partition=lambda w: get_resource(config,resource_key='partition'),
        qos=lambda w: get_resource(config,resource_key='qos'),
        mem_mb=lambda w: get_resource(config,resource_key='mem_mb'),
    script:
        'script.py'


rule relabel_all:
    input:
        expand(rules.relabel.output, dataset=relabel_datasets)


rule all:
    input:
        rules.relabel_all.input
    default_target: True


module common:
    snakefile: "../common/Snakefile"
    config: config


use rule * from common as common_ *


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=config['images'] + f'/{module_name}',
            target='all'
        )