"""
Data Loader
"""
from pathlib import Path
import pandas as pd

from scripts.load_data_utils import get_url
from utils.data import load_dataset_df
from utils.misc import all_but, unlist_dict
from utils.config import get_resource
from utils.wildcards import get_wildcards
from utils.environments import get_env


module_name = 'load_data'

if 'dataset_df' in config.keys():
    dataset_df = config['dataset_df']
elif 'dataset_meta' in config.keys():
    dataset_df = load_dataset_df(config['dataset_meta'])
else:
    dataset_df = pd.DataFrame(columns=['dataset', 'study', 'organ', 'url', 'subset'])
out_dir = Path(config['output_dir']) / module_name
image_dir = Path(config['images']) / module_name

# set default filter settings per values per study filters
if 'filter_per_organ' not in config.keys():
    config['filter_per_organ'] = {}

for _, row in dataset_df[['study', 'organ']].drop_duplicates().iterrows():
    study, organ = row[['study', 'organ']]

    if organ not in config['filter_per_organ'].keys():
        config['filter_per_organ'][organ] = {}
    if 'filter_per_study' not in config.keys():
        config['filter_per_study'] = {}
    if study not in config['filter_per_study'].keys():
        config['filter_per_study'][study] = {}

    # use organ settings as default for all studies of that organ
    for key, value in config['filter_per_organ'][organ].items():
        if key not in config['filter_per_study'][study]:
            config['filter_per_study'][study][key] = value

wildcard_constraints:
    dataset='\w+',
    study='\w+',
    organ='\w+',


module common:
    snakefile: "../common/Snakefile"
    config: config

use rule * from common as common_ *

module load_data:
    snakefile: "rules.smk"
    config: config

include: 'rules/load_data.smk'
include: 'rules/dcp_metadata.smk'
include: 'rules/filter.smk'
include: 'rules/merge.smk'

rule all:
    input:
        expand(rules.load_data_merge_organ.output,**get_wildcards(dataset_df,['organ'])),
        # expand(rules.load_data_merge_organ_filter.output,**get_wildcards(dataset_df,['organ'])),
    default_target: True


rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=config['images'] + f'/{module_name}',
            target='all'
        )
