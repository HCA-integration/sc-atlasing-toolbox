"""
Exploration
"""
from pathlib import Path
import pandas as pd

from utils import get_resource


dataset_df = pd.read_table(workflow.source_path(config['dataset_meta']),comment='#')
out_dir = Path(config['output_dir']) / 'exploration'

wildcard_constraints:
    dataset='\w+',
    organ='\w+',

module load_data:
    snakefile: "../load_data/Snakefile"
    config: config

use rule * from load_data as load_data_ *


rule pca_pseudobulk:
    input:
        h5ad=rules.load_data_metadata.output.h5ad
    output:
        png=out_dir / 'pseudobulk_pca' / '{dataset}.png'
    params:
        bulk_by='sample',
        color='donor',
    conda:
        'envs/scanpy.yaml'
    resources:
        mem_mb=get_resource(config,profile='cpu',resource_key='mem_mb')
    script:
        'scripts/pca_pseudobulk.py'


use rule pca_pseudobulk as pca_pseudobulk_organ with:
    input:
        h5ad=rules.load_data_merge.output.h5ad
    params:
        bulk_by='sample',
        color='dataset',
    output:
        png=out_dir / 'pseudobulk_pca' / 'organ' / '{organ}.png'
    resources:
        mem_mb=400000


rule pca_pseudobulk_all:
    input:
        expand(rules.pca_pseudobulk.output,dataset=dataset_df['dataset_name']),
        expand(rules.pca_pseudobulk_organ.output,organ=dataset_df['organ'].unique()),


rule marker_genes:
    input:
        h5ad=rules.load_data_metadata.output.h5ad
    output:
        png=out_dir / 'marker_genes' / '{dataset}.png',
    params:
        markers=lambda wildcards: config['ORGANS']['blood']['marker_genes']  # TODO: organ per dataset
    conda:
        'envs/scanpy.yaml'
    resources:
        mem_mb=get_resource(config,profile='cpu',resource_key='mem_mb')
    script:
        'scripts/marker_genes.py'


rule marker_genes_all:
    input:
        expand(rules.marker_genes.output,dataset=dataset_df['dataset_name'])


rule qc:
    input:
        h5ad=rules.load_data_metadata.output.h5ad
    output:
        joint=out_dir / 'qc' / '{dataset}_joint.png',
        violin=out_dir / 'qc' / '{dataset}_violin.png',
        average_jitter=out_dir / 'qc' / '{dataset}_average_jitter.png',
    params:
        hue='donor'
    conda:
        'envs/scanpy.yaml'
    resources:
        mem_mb=get_resource(config,profile='cpu',resource_key='mem_mb')
    script:
        'scripts/qc_plot.py'


use rule qc as qc_organ with:
    input:
        h5ad=rules.load_data_merge.output.h5ad
    output:
        joint=out_dir / 'qc' / 'organ' / '{organ}_joint.png',
        violin=out_dir / 'qc' / 'organ' / '{organ}_violin.png',
        average_jitter=out_dir / 'qc' / 'organ' / '{organ}_average_jitter.png',
    params:
        hue='dataset'
    resources:
        mem_mb=400000


rule qc_all:
    input:
        expand(rules.qc.output,dataset=dataset_df['dataset_name']),
        expand(rules.qc_organ.output,organ=dataset_df['organ'].unique())

rule all:
    input:
        rules.pca_pseudobulk_all.input,
        rules.marker_genes_all.input,
        rules.qc_all.input,
    default_target: True
