"""
Exploration
"""
from pathlib import Path
import pandas as pd

from utils import get_resource


dataset_df = pd.read_table(workflow.source_path(config['dataset_meta']),comment='#')
out_dir = Path(config['output_dir']) / 'exploration'

wildcard_constraints:
    dataset='\w+',
    organ='\w+',

module load_data:
    snakefile: "../load_data/Snakefile"
    config: config

use rule * from load_data as load_data_ *


rule summary_stats:
    """
    Summarise
    + number of cells
    + number of cells per sample
    + number of cells per donor
    + disease states
    """
    input:
        h5ad=rules.load_data_metadata.output.h5ad
    output:
        tsv=out_dir / 'summary' / 'datasets' / '{dataset}.tsv',
        sample=out_dir / 'summary' / 'datasets' / '{dataset}_sample.png',
        donor=out_dir / 'summary' / 'datasets' / '{dataset}_donor.png',
    conda:
        'envs/scanpy.yaml'
    resources:
        mem_mb=get_resource(config,profile='cpu',resource_key='mem_mb')
    script:
        'scripts/summary_stats.py'


rule summary_stats_all:
    input:
        tsv=expand(rules.summary_stats.output.tsv,dataset=dataset_df['dataset']),
    output:
        tsv=out_dir / 'summary' / 'all_datasets.tsv',
        aggregate=out_dir / 'summary' / 'all_datasets_aggregated.tsv',
        png=out_dir / 'summary' / 'all_datasets.png',
    conda:
        'envs/scanpy.yaml'
    script:
        'scripts/plot_summary.py'


rule pca_pseudobulk:
    input:
        h5ad=rules.load_data_metadata.output.h5ad
    output:
        png=out_dir / 'pseudobulk_pca' / '{dataset}.png'
    params:
        dataset=lambda wildcards: wildcards.dataset,
        bulk_by='sample',
        color=['donor', 'sex', 'disease'],
    conda:
        'envs/scanpy.yaml'
    resources:
        mem_mb=get_resource(config,profile='cpu',resource_key='mem_mb')
    script:
        'scripts/pca_pseudobulk.py'


use rule pca_pseudobulk as pca_pseudobulk_organ with:
    input:
        h5ad=rules.load_data_merge_organ.output.h5ad
    params:
        dataset=lambda wildcards: wildcards.organ,
        bulk_by='sample',
        color=['dataset', 'reference', 'sex', 'disease', 'assay'],
    output:
        png=out_dir / 'pseudobulk_pca' / 'organ' / '{organ}.png'
    resources:
        mem_mb=500000


rule pca_pseudobulk_all:
    input:
        expand(rules.pca_pseudobulk.output,dataset=dataset_df['dataset']),
        expand(rules.pca_pseudobulk_organ.output,organ=dataset_df['organ'].unique()),


rule marker_genes:
    input:
        h5ad=rules.load_data_metadata.output.h5ad
    output:
        png=out_dir / 'marker_genes' / '{dataset}.png',
    params:
        markers=lambda wildcards: config['ORGANS']['blood']['marker_genes']  # TODO: organ per dataset
    conda:
        'envs/scanpy.yaml'
    resources:
        mem_mb=get_resource(config,profile='cpu',resource_key='mem_mb')
    script:
        'scripts/marker_genes.py'


rule marker_genes_all:
    input:
        expand(rules.marker_genes.output,dataset=dataset_df['dataset'])


rule qc:
    input:
        h5ad=rules.load_data_metadata.output.h5ad
    output:
        joint=out_dir / 'qc' / '{dataset}' / 'joint.png',
        joint_log=out_dir / 'qc' / '{dataset}' / 'joint_log.png',
        violin=out_dir / 'qc' / '{dataset}' / 'violin.png',
        average_jitter=out_dir / 'qc' / '{dataset}' / 'average_jitter.png',
    params:
        dataset=lambda wildcards: wildcards.dataset,
        hue='donor'
    conda:
        'envs/scanpy.yaml'
    resources:
        mem_mb=get_resource(config,profile='cpu',resource_key='mem_mb')
    script:
        'scripts/qc_plot.py'


use rule qc as qc_organ with:
    input:
        h5ad=rules.load_data_merge_organ.output.h5ad
    output:
        joint=out_dir / 'qc' / 'organ' / '{organ}' / 'joint.png',
        joint_log=out_dir / 'qc' / 'organ' / '{organ}' / 'joint_log.png',
        violin=out_dir / 'qc' / 'organ' / '{organ}' / 'violin.png',
        average_jitter=out_dir / 'qc' / 'organ' / '{organ}' / 'average_jitter.png',
    params:
        dataset=lambda wildcards: wildcards.organ,
        hue='study'
    resources:
        mem_mb=500000


rule qc_all:
    input:
        expand(rules.qc.output,dataset=dataset_df['dataset']),
        expand(rules.qc_organ.output,organ=dataset_df['organ'].unique())

rule all:
    input:
        rules.summary_stats_all.output,
        rules.pca_pseudobulk_all.input,
        rules.marker_genes_all.input,
        rules.qc_all.input,
    default_target: True
