from pathlib import Path
import pandas as pd
from snakemake.utils import min_version

from utils_pipeline import update_module_configs, config_for_module


min_version("6.0")
container: "docker://condaforge/mambaforge:latest"
configfile: "configs/config.yaml"
configfile: "configs/load_data.yaml"
configfile: "configs/exploration.yaml"
configfile: "configs/label_transfer.yaml"
configfile: "configs/benchmark.yaml"

params = pd.read_table('configs/modules.tsv',comment='#')
params['submodules'] = params['submodules'].str.split(',')
config = update_module_configs(config, params)

out_dir = Path(config['output_dir'])

os.environ['HDF5_USE_FILE_LOCKING'] = 'FALSE'

envvars:
    'HDF5_USE_FILE_LOCKING'

# Import modules
module common:
    snakefile: "common/Snakefile"

module load_data:
    snakefile: "load_data/Snakefile"
    config: config

module exploration:
    snakefile: "exploration/Snakefile"
    config: config

module subset:
    snakefile: "subset/Snakefile"
    config: config

module preprocessing:
    snakefile: "preprocessing/Snakefile"
    config: config_for_module(config, module='preprocessing')

module label_transfer:
    snakefile: "label_transfer/Snakefile"
    config: config

module integration:
    snakefile: "integration/Snakefile"
    config: config_for_module(config, module='integration')

module metrics:
    snakefile: "metrics/Snakefile"
    config: config

use rule * from common as common_ *

use rule * from load_data as load_data_ *

use rule * from preprocessing as preprocessing_ *

use rule * from exploration as exploration_ *

use rule * from subset as subset_ *

use rule * from label_transfer as label_transfer_ *

use rule * from integration as integration_ *

use rule * from metrics as metrics_ *


rule all:
    input:
        #rules.load_data_all.input,
        #rules.exploration_all.input,
        #rules.preprocessing_all.input,
        #rules.subset_all.input,
        #rules.label_transfer_all.input,
        rules.integration_all.input,
        rules.metrics_all.input
    default_target: True


modules = ['load_data', 'exploration', 'subset', 'integration', 'metrics']

rule dependency_graph:
    input:
        expand(
            rules.common_dependency_graph.input,
            images=config['images'],
            target=[f'{_module}_all' for _module in modules] + ['all']
        )
